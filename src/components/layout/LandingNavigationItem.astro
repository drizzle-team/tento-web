---
interface Props {
  value: string;
  href: string;
  activeKeywords: string[];
}

const { value, href, activeKeywords } = Astro.props;
const { pathname } = Astro.url;

const isActive = activeKeywords && activeKeywords.some(keyword => pathname.startsWith(keyword));
---

<a
  href={href}
  data-active-keywords={activeKeywords}
  class:list={['item_wrap', isActive && 'item_wrap_active']}
>
  {value}
</a>

<style>
  html[class~=dark] .item_wrap {
    color: rgb(156,163,175);
  }

  html[class~=dark] .item_wrap:hover {
    color: rgb(229,231,235);
  }

  html[class~=dark] .item_wrap_active {
    color: rgb(243, 244, 246);
  }

  .item_wrap, .item_wrap_active {
    text-decoration: inherit;
    outline-offset: 2px;
    outline: 2px solid transparent;
    border-radius: 4px;
    position: relative;
    margin-left: -8px;
    white-space: nowrap;
    padding: 8px;
    font-size: 14px;
    color: rgb(75,85,99);
    display: inline-block;
    cursor: pointer;
  }

  .item_wrap:hover {
    --tw-text-opacity: 1;
      color: rgba(31,41,55,var(--tw-text-opacity));
  }

  .item_wrap_active {
    color: rgb(0, 0, 0);
    font-weight: 500;
  }
</style>

<script>
  const navItems = document.querySelectorAll('[data-active-keywords]');
  const handleUrlChange = () => {
    const currentUrl = window.location.href;
    navItems.forEach((item) => {
      if(item instanceof HTMLElement) {
        const activeKeywords = item.dataset.activeKeywords?.split(',');
        const isActive = activeKeywords && activeKeywords.some(keyword => currentUrl.includes(keyword));
        item.classList.toggle('item_wrap_active', isActive);
      }
    });
  }
  window.addEventListener('hashchange', handleUrlChange);
  document.addEventListener('DOMContentLoaded', handleUrlChange);
</script>