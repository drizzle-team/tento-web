---
import type { IHeading, TreeNode } from '@/types/astro';
import SidebarContentWrap from './SidebarContentWrap.astro';


interface Props {
    headings?: IHeading[];
  }

  export interface SidebarItem {
    type: string;
    title: string;
    path: string;
  }

  const { slug } = Astro.params;
  const { headings } = Astro.props;

  const metaFiles = await import.meta.glob('../../content/**/*.json');
  const mdxFiles = await import.meta.glob('../../content/**/*.mdx');
  const mdxPaths = Object.keys(mdxFiles);
  
  const regex = /\.\.\/content\/documentation\/(.*?)\/_meta\.json/;

  const navItems: SidebarItem[] = [];

  const getTypeOfFile = (value: string) => {
    if(mdxPaths.includes(`../../content/documentation/${value}.mdx`)) {
      return 'mdx';
    } 
    if(mdxPaths.some((path) => path.includes(value))) {
      return 'subDir';
    }
    return 'empty';
  }

  for(const meta in metaFiles) {
    const {default: parsed} = await metaFiles[meta]() as any;
    const metaSlug = meta.match(regex);
    if(metaSlug) {
      const extractedText = metaSlug[1];
      const parsedKeys = Object.keys(parsed);
      parsedKeys.forEach((key) => {
        if(typeof parsed[key] === 'string') {
          navItems.push({
            type: getTypeOfFile(`${metaSlug[1]}/${key}`),
            title: parsed[key],
            path: `${extractedText}/${key}`,
          });
        }
        if(typeof parsed[key] === 'object') {
          if('type' in parsed[key] && parsed[key].type === 'separator' && 'title' in parsed[key]) {
            navItems.push({
            type: 'separator',
            title: parsed[key].title,
            path: `${extractedText}/${key}`
          });
          }
        }
      })
    }
  }

  function buildTree(items: SidebarItem[]) {
    const tree: TreeNode[] = [];
    for (const item of items) {
      const parts = item.path.split('/');
      let currentNode = tree;

      for (const part of parts) {
        let existingNode = currentNode.find(node => node.name === part);
        if (existingNode && existingNode.children) {
          currentNode = existingNode.children;
        } else {
          const newNode = { 
            name: part,
            type: item.type,
            title: item.title,
            children: [] };
          currentNode.push(newNode);
          currentNode = newNode.children;
        }
      }
    }
    return tree;
  }

  const tree = buildTree(navItems);

  const filteredHeadings = headings?.filter((heading) => heading.depth === 2 || heading.depth === 3)!;
---
<div class="aside-content">
  <SidebarContentWrap filteredHeadings={filteredHeadings} slug={slug}
   tree={tree}
   />
</div>